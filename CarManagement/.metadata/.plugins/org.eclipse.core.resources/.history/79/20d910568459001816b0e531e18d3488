package com.bailian.car.service.system.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.bailian.car.common.JsonData;
import com.bailian.car.dao.system.RoleRepository;
import com.bailian.car.dao.system.UserRepository;
import com.bailian.car.domain.system.Role;
import com.bailian.car.domain.system.User;
import com.bailian.car.exception.CustomException;
import com.bailian.car.service.system.UserService;
import com.bailian.car.utils.ComputerInfoUtils;
import com.bailian.car.utils.MD5Utils;
import com.bailian.car.utils.TokenManagerUtils;

@Service
@Transactional
public class UserServiceImpl implements UserService {
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private RoleRepository roleRepository;

	@Override
	public JsonData login(String username, String password, String autologin) {
		// TODO Auto-generated method stub
		// 获取当前用户
		Subject subject = SecurityUtils.getSubject();

		// 从session中获取验证码
		String code = (String) request.getSession().getAttribute("vCode");
		System.out.println(code);

		if (StringUtils.isBlank(verifyCode)) {
			return JsonData.fail("验证码不能为空");
		}
		String vcode = verifyCode.toLowerCase();

		System.out.println(vcode);
		if (StringUtils.isBlank(username)) {
			return JsonData.fail("用户名不能为空");
		}

		if (!StringUtils.equals(vcode, code)) {
			return JsonData.fail("验证码错误");
		}
		try {

			// 对密码进行MD5加密
			String pass = MD5Utils.toMD5(password, MD5Utils.salt);
			// 传入密码和用户构建令牌
			UsernamePasswordToken token = new UsernamePasswordToken(username, pass);
			if ("true".equals(autologin)) {
				token.setRememberMe(true);
			}
			// 登录成功，保存session
			subject.login(token);
			User user = TokenManagerUtils.getToken();
			request.getSession().removeAttribute("vCode");
			JsonData success = JsonData.success(user, "登录成功");
			return success;
		} catch (AuthenticationException e) {
			if (e instanceof UnknownAccountException) {
				return JsonData.fail("无此用户，请联系管理员");
			} else if (e instanceof IncorrectCredentialsException) {
				return JsonData.fail("密码错误");
			}
			return JsonData.fail("登录失败");
		}

	}

	@Override
	public User findByUsername(String username) {
		// TODO Auto-generated method stub
		return userRepository.findByUsername(username);
	}

	@Override
	public JsonData changeUserPassWord(String username, String oldpassword, String newpassword) {

		String pass = MD5Utils.toMD5(oldpassword, MD5Utils.salt);
		User user = userRepository.findUserByUsernameAndPassword(username, pass);
		if (user == null) {
			return JsonData.fail("用户名和密码错误");
		}
		if (newpassword == null || newpassword.equals("")) {
			return JsonData.fail("请重新输入新密码");
		}
		String newpass = MD5Utils.toMD5(newpassword, MD5Utils.salt);

		int result = userRepository.updatePassWord(username, newpass);
		if (result == 1) {
			// 用户退出
			TokenManagerUtils.logout();

			return JsonData.fail("修改密码成功");
		} else {

			return JsonData.success("修改密码失败");
		}

	}

	@Override
	public List<User> findALL() {
		// TODO Auto-generated method stub
		List<User> users = userRepository.findAll();

		return users;

	}

	// 1、2、3、4分别代表username、phone、email、nickname
	@Override
	public JsonData checkData(String param, Integer type) {
		String username = null;
		String telephone = null;
		String email = null;
		String nickname = null;
		if (param != null & type != null) {
			// TODO Auto-generated method stub
			if (type == 1) {
				username = param;
				User user = userRepository.findByUsername(username);
				if (user != null) {
					return JsonData.fail("账户已经被占用");
				}
				return JsonData.success();
			}

			if (type == 2) {
				telephone = param;
				User user = userRepository.findByTelephone(telephone);
				if (user != null) {
					return JsonData.fail("此号码已经被占用");
				}
				return JsonData.success();
			}

			if (type == 3) {
				email = param;
				User user = userRepository.findByEmail(email);
				if (user != null) {
					return JsonData.fail("邮箱已经被占用");
				}
				return JsonData.success();

			}

			if (type == 4) {
				nickname = param;
				User user = userRepository.findByNickname(nickname);
				if (user != null) {
					return JsonData.fail("用户名已经被占用");
				}
				return JsonData.success();
			}
		} else {
			return JsonData.fail("非法的参数");
		}
		return null;
	}

	@Override
	@Transactional
	@RequiresRoles("system")
	public JsonData save(User user, String[] ids) {

		// TODO Auto-generated method stub
		if (StringUtils.isBlank(user.getUsername())) {
			return JsonData.fail("账号不能为空");
		}
		if (StringUtils.isBlank(user.getPassword())) {
			return JsonData.fail("密码不能为空");

		}
		if (StringUtils.isBlank(user.getEmail())) {
			return JsonData.fail("邮箱不能为空");
		}
		if (StringUtils.isBlank(user.getUsername())) {
			return JsonData.fail("用户名不能为空");
		}

		if (StringUtils.isBlank(user.getTelephone())) {
			return JsonData.fail("手机号不能为空");
		}

		// User currentUser = TokenManagerUtils.getToken();
		// 获取当前用户电脑的ip
		String ipAddr = ComputerInfoUtils.getIpAddr();
		// 补全User的其他属性
		user.setCreateTime(new Date());
		user.setOperate_id(ipAddr);
		user.setOperator("admin");
		user.setStatus(1);
		/*
		 * user.setOperate_id("1234567"); user.setOperator("1234567");
		 */
		String md5pass = MD5Utils.toMD5(user.getPassword(), MD5Utils.salt);
		user.setPassword(md5pass);

		if (ids == null || ids.length == 0) {
			userRepository.save(user);
			return JsonData.success();

		} else {
			for (String id : ids) {
				Role role = roleRepository.findOne(Integer.parseInt(id));
				user.getRoles().add(role);
			}
			userRepository.save(user);
			return JsonData.success("添加成功");
		}

	}

	@Override
	@RequiresRoles("system")
	public int deleteUserByID(String[] userIds) {
		// TODO Auto-generated method stub
		int a = 0;
		for (String userId : userIds) {
			int id = Integer.parseInt(userId);
			User user = userRepository.findOne(id);
			if (user != null) {
				userRepository.delete(user);
				a = 1;
			} else {
				throw new CustomException("此用户不存在");
			}

		}
		return a;

	}

	@Override
	public User findUserById(Integer userId) {
		return userRepository.findOne(userId);
	}

	@Override
	@RequiresRoles("system")
	public JsonData updateUser(User user) {
		if (user.getUid() != null & user != null) {
			User user2 = userRepository.findOne(user.getUid());
			user2.setCreateTime(new Date());
			user2.setOperate_id(ComputerInfoUtils.getIpAddr());
			user2.setEmail(user.getEmail());
			user2.setTelephone(user.getTelephone());
			user2.setUsername(user.getUsername());
			userRepository.save(user2);
			return JsonData.success("修改成功");
		}
		return JsonData.fail("修改失败");
	}

	@Override
	public List<User> Query(String username, String nickname) {
		List<Predicate> p = new ArrayList<>();
		Specification<User> querySpecifi = new Specification<User>() {
			@Override
			public Predicate toPredicate(Root<User> root, CriteriaQuery<?> query, CriteriaBuilder cb) {

				if (StringUtils.isNotBlank(username)) {
					Predicate predicate1 = cb.like(root.get("username").as(String.class), "%" + username + "%");
					p.add(predicate1);
				}

				if (StringUtils.isNotBlank(nickname)) {
					Predicate predicate2 = cb.like(root.get("nickname").as(String.class), "%" + nickname + "%");
					p.add(predicate2);
				}
				// TODO Auto-generated method stub
				return cb.and(p.toArray(new Predicate[p.size()]));
			}

		};
		List<User> findAll = userRepository.findAll(querySpecifi);
		return findAll;
	}

	@Override
	@RequiresRoles("system")
	public JsonData userRelatedRole(Integer uid, String rids) {
		if (uid != null) {
			User user = userRepository.findOne(uid);
			if (rids.length() != 0) {
				String[] ridss = rids.split(",");
				for (String rid : ridss) {
					Role role = roleRepository.findOne(Integer.parseInt(rid));
					user.getRoles().add(role);
					userRepository.save(user);
					return JsonData.success("关联成功");
				}
			}
			return JsonData.fail("请选择一角色");
		}
		return JsonData.fail("请选择一个用户");
	}

}
