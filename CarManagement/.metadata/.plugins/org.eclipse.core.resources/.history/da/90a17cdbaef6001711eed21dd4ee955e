<?xml version="1.0" encoding="UTF-8"?>
<!-- 默认为 <configuration scan="true" scanPeriod="60 seconds" debug="false"> -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false -->
<configuration scan="true" debug="true" scanPeriod="60 seconds">
	<!-- appender 是指输出的形式或者位置 -->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<!-- encoder负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd-HH:mm:ss.SSS} %level
				[%thread]-%class:%line>>%msg%n
			</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>
	<!-- 输出到文件 -->
	<appender name="file" class="ch.qos.logback.core.FileAppender">
		<file>log/file.log</file>
		<!-- 默认append=true，即可追加而非覆盖 -->
		<append>true</append>
		<encoder>
			<!-- pattern部分见我的博客 -->
			<pattern>%d{yyyy-MM-dd-HH:mm:ss.SSS} %level
				[%thread]-%class:%line>>%msg%n
			</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<!-- prudent=true表示日志写入线程安全，会降低效率，默认为false -->
		<prudent>false</prudent>
	</appender>
	<!-- 这个appender是每天生成一个日志文件，并且只保留30天 -->
	<!-- 滚动输出到文件，达到一定条件时，会将日志记录到其他文件 -->
	<appender name="timeFile"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 滚动策略。具体策略由class指定。 -->
		<!-- TimeBasedRollingPolicy是最常用的滚动策略，根据时间滚动，当达到一定时间时，自动重新开辟一个日志文件 -->
		<!-- FixedWindowRollingPolicy根据固定窗口算法重命名文件的滚动策略 -->
		<!-- triggeringPolicy根据当前活动文件大小来决定是否滚动的策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 由于表达式中最小单位为天，所以每天生成一个日志文件，且以此命名 -->
			<fileNamePattern>log/logFile%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 保留归档文件的最大数量。 -->
			<!-- 本例中由于使用了时间作为滚动策略，且fileNamePattern中最小单位为天，所以归档文件保存30天，超过30天将被删除 -->
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd-HH:mm:ss.SSS} %level
				[%thread]-%class:%line>>%msg%n
			</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- 这个appender生成的日志文件满足5MB时会新建日志文件继续生成，只生成3个，当超过3个时将覆盖最早的日志 -->
	<appender name="fixedFile"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>log/fixedFile.log</file>
		<!-- 根据固定窗口模式生成日志文件，结合triggeringPolicy（当日志文件达到5MB时触发滚动，生成新的日志文件） -->
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<!-- 日志文件命名，%i代表从minIndex到maxIndex，即 fixedFile1.log.zip fixedFile2.log.zip 
				fixedFile3.log.zip -->
			<!-- 当生成了3个归档文件后，若继续生成，将覆盖最早的日志 -->
			<fileNamePattern>log/fixedFile%i.log.zip</fileNamePattern>
			<minIndex>1</minIndex>
			<!-- maxIndex若过大，会被设为12 -->
			<maxIndex>3</maxIndex>
		</rollingPolicy>

		<!-- 触发策略，达到一定条件时将通知appender，触发滚动 -->
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<maxFileSize>5MB</maxFileSize>
		</triggeringPolicy>


		<encoder>
			<pattern>%d{yyyy-MM-dd-HH:mm:ss.SSS} %level
				[%thread]-%class:%line>>%msg%n
			</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>
</configuration>