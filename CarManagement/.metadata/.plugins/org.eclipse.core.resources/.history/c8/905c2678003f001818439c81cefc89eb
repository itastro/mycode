package com.bailian.car.common.utils;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
public class VerifyCodeUtils {

	private VerifyCodeUtils() {

	}

	public static final String VERIFY_CODES = "0123456789";
	private static SecureRandom random = new SecureRandom();

	/**
	 * 使用系统默认字符源生成验证码
	 * 
	 * @param verifySize
	 *            验证码长度
	 * @return
	 */
	public static String generateVerifyCode(int verifySize) {
		return generateVerifyCode(verifySize, VERIFY_CODES);
	}

	/**
	 * 使用指定源生成验证码
	 * 
	 * @param verifySize
	 *            验证码长度
	 * @param sources
	 *            验证码字符源
	 * @return
	 */
	public static String generateVerifyCode(int verifySize, String sources) {
		String _sources = sources;
		if (_sources == null || _sources.length() == 0) {
			_sources = VERIFY_CODES;
		}
		int codesLen = _sources.length();
		SecureRandom rand = new SecureRandom();
		StringBuilder verifyCode = new StringBuilder(verifySize);
		for (int i = 0; i < verifySize; i++) {
			verifyCode.append(_sources.charAt(rand.nextInt(codesLen - 1)));
		}
		return verifyCode.toString();
	}

	/**
	 * 生成随机验证码文件,并返回验证码值
	 * 
	 * @param w
	 * @param h
	 * @param outputFile
	 * @param verifySize
	 * @return
	 * @throws IOException
	 */
	public static String outputVerifyImage(int w, int h, File outputFile, int verifySize) throws IOException {
		String verifyCode = generateVerifyCode(verifySize);
		outputImage(w, h, outputFile, verifyCode);
		return verifyCode;
	}

	/**
	 * 输出随机验证码图片流,并返回验证码值
	 * 
	 * @param w
	 * @param h
	 * @param os
	 * @param verifySize
	 * @return
	 * @throws IOException
	 */
	public static String outputVerifyImage(int w, int h, OutputStream os, int verifySize) throws IOException {
		String verifyCode = generateVerifyCode(verifySize);
		outputImage(w, h, os, verifyCode);
		return verifyCode;
	}

	/**
	 * 生成指定验证码图像文件
	 * 
	 * @param w
	 * @param h
	 * @param outputFile
	 * @param code
	 * @throws IOException
	 */
	public static void outputImage(int w, int h, File outputFile, String code) throws IOException {
		if (outputFile == null) {
			return;
		}
		File dir = outputFile.getParentFile();
		if (!dir.exists()) {
			dir.mkdirs();
		}
		FileOutputStream fos = null;
		try {
			outputFile.createNewFile();
			fos = new FileOutputStream(outputFile);
			outputImage(w, h, fos, code);
		} catch (IOException e) {

		} finally {
		}
	}

	/**
	 * 输出指定验证码图片流
	 * 
	 * @param w
	 * @param h
	 * @param os
	 * @param code
	 * @throws IOException
	 */
	public static void outputImage(int w, int h, OutputStream os, String code) throws IOException {
		int verifySize = code.length();
		BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
		SecureRandom rand = new SecureRandom();
		Graphics2D g2 = image.createGraphics();
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		Color[] colors = new Color[5];
		Color[] colorSpaces = new Color[] { Color.WHITE, Color.CYAN, Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA,
				Color.ORANGE, Color.PINK, Color.YELLOW };
		float[] fractions = new float[colors.length];
		for (int i = 0; i < colors.length; i++) {
			colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];
			fractions[i] = rand.nextFloat();
		}
		Arrays.sort(fractions);

		g2.setColor(Color.black);// 设置边框色
		g2.fillRect(0, 0, w, h);

		Color c = getRandColor(200, 250);
		g2.setColor(c);// 设置背景色
		g2.fillRect(0, 2, w, h - 4);

		// 绘制干扰线
		SecureRandom random = new SecureRandom();
		g2.setColor(getRandColor(160, 200));// 设置线条的颜色
		for (int i = 0; i < 20; i++) {
			int x = random.nextInt(w - 1);
			int y = random.nextInt(h - 1);
			int xl = random.nextInt(6) + 1;
			int yl = random.nextInt(12) + 1;
			g2.drawLine(x, y, x + xl + 40, y + yl + 20);
		}

		// 添加噪点
		float yawpRate = 0.05f;// 噪声率
		int area = (int) (yawpRate * w * h);
		for (int i = 0; i < area; i++) {
			int x = random.nextInt(w);
			int y = random.nextInt(h);
			int rgb = getRandomIntColor();
			image.setRGB(x, y, rgb);
		}

		shear(g2, w, h, c);// 使图片扭曲

		g2.setColor(getRandColor(100, 160));
		int fontSize = h - 4;
		Font font = new Font("Algerian", Font.ITALIC, fontSize);
		g2.setFont(font);
		char[] chars = code.toCharArray();
		for (int i = 0; i < verifySize; i++) {
			AffineTransform affine = new AffineTransform();
			affine.setToRotation(Math.PI / 4 * rand.nextDouble() * (rand.nextBoolean() ? 1 : -1),
					(w / verifySize) * i + fontSize / 2, h / 2);
			g2.setTransform(affine);
			g2.drawChars(chars, i, 1, ((w - 10) / verifySize) * i + 5, h / 2 + fontSize / 2 - 10);
		}

		g2.dispose();
		ImageIO.write(image, "jpg", os);
	}

	private static Color getRandColor(int fc, int bc) {
		int _fc = fc;
		int _bc = bc;
		if (_fc > 255)
			_fc = 255;
		if (_bc > 255)
			_bc = 255;
		int r = _fc + random.nextInt(_bc - _fc);
		int g = _fc + random.nextInt(_bc - _fc);
		int b = _fc + random.nextInt(_bc - _fc);
		return new Color(r, g, b);
	}

	private static int getRandomIntColor() {
		int[] rgb = getRandomRgb();
		int color = 0;
		for (int c : rgb) {
			color = color << 8;
			color = color | c;
		}
		return color;
	}

	private static int[] getRandomRgb() {
		int[] rgb = new int[3];
		for (int i = 0; i < 3; i++) {
			rgb[i] = random.nextInt(255);
		}
		return rgb;
	}

	private static void shear(Graphics g, int w1, int h1, Color color) {
		shearX(g, w1, h1, color);
		shearY(g, w1, h1, color);
	}

	private static void shearX(Graphics g, int w1, int h1, Color color) {
		int period = random.nextInt(2);
		int frames = 1;
		int phase = random.nextInt(2);
		for (int i = 0; i < h1; i++) {
			double d = (double) (period >> 1)
					* Math.sin((double) i / (double) period + (6.2831853071795862D * (double) phase) / (double) frames);
			g.copyArea(0, i, w1, 1, (int) d, 0);
			g.setColor(color);
			g.drawLine((int) d, i, 0, i);
			g.drawLine((int) d + w1, i, w1, i);
		}

	}

	private static void shearY(Graphics g, int w1, int h1, Color color) {
		int period = random.nextInt(40) + 10;
		int frames = 20;
		int phase = 7;
		for (int i = 0; i < w1; i++) {
			double d = (double) (period >> 1)
					* Math.sin((double) i / (double) period + (6.2831853071795862D * (double) phase) / (double) frames);
			g.copyArea(i, 0, 1, h1, 0, (int) d);
			g.setColor(color);
			g.drawLine(i, (int) d, i, 0);
			g.drawLine(i, (int) d + h1, i, h1);

		}

	}
	  public static void main(String[] args) throws IOException{  
	        File dir = new File("E:/verifies");  
	        int w = 200, h = 80;  
	        for(int i = 0; i < 50; i++){  
	            String verifyCode = generateVerifyCode(4);  
	            File file = new File(dir, verifyCode + ".jpg");  
	            //outputImage(w, h, file, verifyCode);  
	            outputVerifyImage(w, h,file, 5);
	            generateVerifyCode(4);
	        }  
	    }  
	  
	  public static void outPutImagCode(HttpServletRequest request, HttpServletResponse response) throws IOException {
			// 随机数生成类
			Random random = new Random();

			// 定义验证码的位数
			int size = 4;
			// 定义变量保存生成的验证码
			String vCode = "";
			char c = 0;
			// 产生验证码
			for (int i = 0; i < size; i++) {
				// 产生一个26以内的随机整数
				int number = random.nextInt(26);
				// 如果生成的是偶数，则随机生成一个数字
				if (number % 2 == 0) {
					c = (char) ('0' + (char) ((int) (Math.random() * 10)));
					// 如果生成的是奇数，则随机生成一个字母
				/*} else {
					c = (char) ((char) ((int) (Math.random() * 26)) + 'A');*/
				}
				vCode = vCode + c;
			}
			String code = vCode.toLowerCase();
			// 保存生成的5位验证码
			request.getSession().setAttribute("vCode", code);

			// 验证码图片的生成
			// 定义图片的宽度和高度
			int width = (int) Math.ceil(size * 20);
			int height = 30;
			BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
			// 获取图片的上下文
			Graphics gr = image.getGraphics();
			// 设定图片背景颜色
			gr.setColor(Color.WHITE);
			gr.fillRect(0, 0, width, height);
			// 设定图片边框
			gr.setColor(Color.GRAY);
			gr.drawRect(0, 0, width - 1, height - 1);
			// 画十条干扰线
			for (int i = 0; i < 5; i++) {
				int x1 = random.nextInt(width);
				int y1 = random.nextInt(height);
				int x2 = random.nextInt(width);
				int y2 = random.nextInt(height);
				gr.setColor(randomColor());
				gr.drawLine(x1, y1, x2, y2);
			}
			// 设置字体，画验证码
			gr.setColor(randomColor());
			gr.setFont(randomFont());
			gr.drawString(vCode, 10, 22);
			// 图像生效
			gr.dispose();
			// 输出到页面
			ImageIO.write(image, "JPEG", response.getOutputStream());
		}

		// 生成随机的颜色
		private static Color randomColor() {
			int red = r.nextInt(150);
			int green = r.nextInt(150);
			int blue = r.nextInt(150);
			return new Color(red, green, blue);
		}

		private static String[] fontNames = { "宋体", "华文楷体", "黑体", "微软雅黑", "楷体_GB2312" };
		private static Random r = new Random();

		// 生成随机的字体
		private static Font randomFont() {
			int index = r.nextInt(fontNames.length);
			String fontName = fontNames[index];// 生成随机的字体名称
			int style = r.nextInt(4);
			int size = r.nextInt(3) + 24; // 生成随机字号, 24 ~ 28
			return new Font(fontName, style, size);
		}
		
		public static void main(String[] args) {
			VerifyCodeUtils.outPutImagCode(request, response);
		}

}