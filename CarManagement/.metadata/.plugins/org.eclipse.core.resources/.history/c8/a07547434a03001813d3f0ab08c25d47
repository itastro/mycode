package com.bailian.car.controller;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.List;
import java.util.Random;
import java.util.Set;
import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.bailian.car.common.exception.CustomException;
import com.bailian.car.common.pojo.JsonData;
import com.bailian.car.domain.system.Role;
import com.bailian.car.domain.system.User;
import com.bailian.car.domain.vo.EditUserVo;
import com.bailian.car.service.UserService;
import com.fasterxml.jackson.databind.util.JSONPObject;

@Controller
@Scope("prototype")
@RequestMapping("/user")
public class UserController {

	@Autowired
	private UserService userService;

	/**
	 * 
	 * @Title: genarateCode
	 * @Description: 验证码
	 * @param @param
	 *            request
	 * @param @param
	 *            response
	 * @param @throws
	 *            IOException 参数
	 * @return void 返回类型 @throws
	 */
	@RequestMapping(value = "/code.action")
	public void genarateCode(HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setHeader("Access-Control-Allow-Origin", "*");
		// 响应头信息
		response.setHeader("Pragma", "No-Cache");
		response.setHeader("Cache-Control", "no-cache");
		response.setDateHeader("Expries", 0);

		// 随机数生成类
		Random random = new Random();

		// 定义验证码的位数
		int size = 4;
		// 定义变量保存生成的验证码
		String vCode = "";
		char c;
		// 产生验证码
		for (int i = 0; i < size; i++) {
			// 产生一个26以内的随机整数
			int number = random.nextInt(26);
			// 如果生成的是偶数，则随机生成一个数字
			if (number % 2 == 0) {
				c = (char) ('0' + (char) ((int) (Math.random() * 10)));
				// 如果生成的是奇数，则随机生成一个字母
			} else {
				c = (char) ((char) ((int) (Math.random() * 26)) + 'A');
			}
			vCode = vCode + c;
		}
		String code = vCode.toLowerCase();
		// 保存生成的5位验证码
		request.getSession().setAttribute("vCode", code);

		// 验证码图片的生成
		// 定义图片的宽度和高度
		int width = (int) Math.ceil(size * 20);
		int height = 30;
		BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		// 获取图片的上下文
		Graphics gr = image.getGraphics();
		// 设定图片背景颜色
		gr.setColor(Color.WHITE);
		gr.fillRect(0, 0, width, height);
		// 设定图片边框
		gr.setColor(Color.GRAY);
		gr.drawRect(0, 0, width - 1, height - 1);
		// 画十条干扰线
		for (int i = 0; i < 5; i++) {
			int x1 = random.nextInt(width);
			int y1 = random.nextInt(height);
			int x2 = random.nextInt(width);
			int y2 = random.nextInt(height);
			gr.setColor(randomColor());
			gr.drawLine(x1, y1, x2, y2);
		}
		// 设置字体，画验证码
		gr.setColor(randomColor());
		gr.setFont(randomFont());
		gr.drawString(vCode, 10, 22);
		// 图像生效
		gr.dispose();
		// 输出到页面
		ImageIO.write(image, "JPEG", response.getOutputStream());

	}

	// 生成随机的颜色
	private Color randomColor() {
		int red = r.nextInt(150);
		int green = r.nextInt(150);
		int blue = r.nextInt(150);
		return new Color(red, green, blue);
	}

	private String[] fontNames = { "宋体", "华文楷体", "黑体", "微软雅黑", "楷体_GB2312" };
	private Random r = new Random();

	// 生成随机的字体
	private Font randomFont() {
		int index = r.nextInt(fontNames.length);
		String fontName = fontNames[index];// 生成随机的字体名称
		int style = r.nextInt(4);
		int size = r.nextInt(3) + 24; // 生成随机字号, 24 ~ 28
		return new Font(fontName, style, size);
	}

	@RequestMapping(value = "/login.action")
	@ResponseBody
	// jsondata
	public Object login(String username, String password, String verifyCode, HttpServletRequest request,
			HttpServletResponse response) {

		String parameter = request.getParameter("jsonpCallback");
		JsonData login = userService.login(username, password, verifyCode, request);
		if (StringUtils.isBlank(parameter)) {
			return login;
		}

		return new JSONPObject(parameter, login);

	}

	@RequestMapping(value = "/loginOut.action")
	@ResponseBody
	public JsonData loginOut() {
		// 基于Shiro的退出
		Subject subject = SecurityUtils.getSubject();
		subject.logout();
		return JsonData.success();
	}

	@RequestMapping(value = "/changeUserPassWord.action")
	@ResponseBody
	public JsonData changeUserPassWord(HttpServletRequest request, HttpServletResponse response) {
		String usrname = request.getParameter("usrname");
		String oldpassword = request.getParameter("oldpassword");
		String newpassword = request.getParameter("newpassword");
		return userService.changeUserPassWord(usrname, oldpassword, newpassword);

	}

	@RequestMapping(value = "/UserInfo.action")
	@ResponseBody
	public String userInfo() {
		Subject subject = SecurityUtils.getSubject();
		User user = (User) subject.getPrincipal();
		Set<Role> roles = user.getRoles();
		return null;

	}

	@RequestMapping("/userList.action")
	@ResponseBody
	public List<User> userList() {

		List<User> users = userService.findALL();

		if (users == null) {
			throw new CustomException("用户列表为空");

		}
		return users;
	}

	@RequestMapping(value = "/addUser.action")
	@ResponseBody
	public JsonData addUser(User user, @RequestParam(value = "ids[]", required = false) String[] roleIds) {
		return userService.save(user, roleIds);

	}

	@RequestMapping("/check/{param}/{type}")
	@ResponseBody
	public JsonData checkData(@PathVariable String param, @PathVariable Integer type) {
		return userService.checkData(param, type);
	}

	@RequestMapping("/delete.action")
	public String deleteUser(@RequestParam(value = "ids[]") String[] userIds, HttpServletRequest request,
			HttpServletResponse response) {

		userService.deleteUserByID(userIds);

		return "userList";

	}

	@RequestMapping("/editUser.action")

	public String editUser(Model model, HttpServletRequest request, @RequestParam(value = "id") Integer userId) {

		User user = userService.findUserById(userId);

		if (user == null) {
			throw new CustomException("查无此用户，请联系管理员");
		}
		model.addAttribute("user", user);

		return "editUser";
	}

	@RequestMapping("/updateUser1")
	public String updateUser(User user) {
		userService.updateUser(user);

		return "userList";
	}
	
	@RequestMapping("/updateUser.action")
	public String updateUser(EditUserVo user,Integer id) {
		userService.updateUser(user,id);

		return "userList";
	}
}
