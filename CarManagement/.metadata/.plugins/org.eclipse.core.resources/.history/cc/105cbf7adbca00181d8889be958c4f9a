package com.bailian.car.controller.cars.license;

import java.util.List;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.UnauthorizedException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.bailian.car.annotation.SystemLog;
import com.bailian.car.beans.PageBean;
import com.bailian.car.beans.PageQuery;
import com.bailian.car.common.JsonData;
import com.bailian.car.domain.cars.car.HistoryLicense;
import com.bailian.car.dto.LicenseDto;
import com.bailian.car.emnu.OperationType;
import com.bailian.car.exception.ParamException;
import com.bailian.car.exception.PermissionException;
import com.bailian.car.param.LicSearchParam;
import com.bailian.car.param.LicenseParam;
import com.bailian.car.service.cars.license.LicenseService;
import com.bailian.car.utils.BeanValidator;
import com.bailian.car.utils.JsonMapper;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;

@Api(description = "车辆牌照相关操作")
@Slf4j
@Controller
@RequestMapping("/license")
public class LicenseController {

	@Autowired
	private LicenseService licenseService;

	// 验车校验
	@RequestMapping("/vehicleInspectionCheck.action")
	@ResponseBody
	@ApiOperation(value = "车辆校验")
	public JsonData vehicleInspection(String vSn) {
		log.info("vSn:{}", vSn);
		checkParam(vSn);
		
		try {
			return licenseService.vehicleInspectionCheck(vSn);
		} catch (UnauthorizedException e) {
			throw new PermissionException("当前用户不具备验车申请权限");
		}

		

	}

	@RequestMapping("/generateVehicleInspection.action")
	@ResponseBody
	@ApiOperation(value = "生成验车表单")
	@SystemLog(type = OperationType.APPLY, medoule = "车辆管理", methods = "验车申请")
	// 生成验车单
	public JsonData generateVehicleInspection(String vSn) {
		checkParam(vSn);
		return licenseService.generateVehicleInspection(vSn);
	}

	private void checkParam(String vSn) {
		if (StringUtils.isBlank(vSn)) {
			throw new ParamException("参数不能为空");
		}
	}

	// 车牌信息录入
	@RequestMapping("/addLicense.action")
	@ResponseBody
	@SystemLog(type = OperationType.ADD, medoule = "车辆管理", methods = "车牌信息录入")
	@ApiOperation(value = "车辆牌照信息的录入")
	@ApiImplicitParams({ @ApiImplicitParam(name = "vSn", value = "车辆编号", dataType = "String"),
			@ApiImplicitParam(name = "licenseEndTime", value = "牌照结束日期", dataType = "Date"),
			@ApiImplicitParam(name = "remark", value = "备注", dataType = "string"),
			@ApiImplicitParam(name = "whether", value = "是否拿到临牌/是或否", dataType = "string"),
			@ApiImplicitParam(name = "LicenseNo", value = "保险编号", dataType = "string") })
	public JsonData saveLicenese(@RequestBody LicenseParam license) {
		log.info("license:{}", JsonMapper.obj2String(license));
		BeanValidator.check(license);
		return licenseService.saveLicenese(license);
	}

	// 车牌历史信息查询
	@RequestMapping("/historyLicenseByvSn.action")
	@ResponseBody
	public List<HistoryLicense> historyLicenseByvSn(String vSn) {
		log.info("vSn:{}", vSn);
		return licenseService.historyLicenseByvSn(vSn);
	}

	// 车牌信息的修改
	@RequestMapping("/updateLicense.action")
	@ResponseBody
	@SystemLog(type = OperationType.ADD, medoule = "车辆管理", methods = "车牌信息修改")
	@ApiOperation(value = "车牌信息的修改")
	public JsonData updateLicense(@RequestBody LicenseParam license) {
		log.info("license:{}", JsonMapper.obj2String(license));
		return licenseService.updateLicense(license);
	}

	// 车牌的查询
	@RequestMapping("/query.action")
	@ResponseBody
	public PageBean<LicenseDto> pageQuery(PageQuery pageQuery, LicSearchParam licSearchParam) {
		log.info("licSearchParam:{}", JsonMapper.obj2String(licSearchParam));

		return licenseService.pageQuery(pageQuery, licSearchParam);
	}

	// 取消验车
	@RequestMapping("/cancle.action")
	@ResponseBody
	public JsonData cancle(String vSn) {

		log.info("vSn:{}", vSn);
		checkParam(vSn);
		try {
			return licenseService.cancle(vSn);
		} catch (UnauthorizedException e) {
			throw new PermissionException("当前用户不具备取消验车权限");
		}
		
	}
}
