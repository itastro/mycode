package com.bailian.car.service.iccard.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import com.bailian.car.beans.PageBean;
import com.bailian.car.beans.PageQuery;
import com.bailian.car.common.IccardResult;
import com.bailian.car.common.JsonData;
import com.bailian.car.common.LedResult;
import com.bailian.car.dao.cars.car.CarRepository;
import com.bailian.car.dao.driver.DriverRepository;
import com.bailian.car.dao.iccard.IccardRepository;
import com.bailian.car.dao.iccard.IccardUseHistoryRepository;
import com.bailian.car.domain.cardriver.Driver;
import com.bailian.car.domain.cars.car.Car;
import com.bailian.car.domain.iccard.Iccard;
import com.bailian.car.domain.iccard.IccardUseHistory;
import com.bailian.car.exception.PermissionException;
import com.bailian.car.param.IccardSearch;
import com.bailian.car.param.WriteCarCard;
import com.bailian.car.service.iccard.IccardService;
import com.bailian.car.utils.DateUtils;
import com.bailian.car.utils.JsonMapper;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@Transactional
public class IccardServiceImpl implements IccardService {

	@Autowired
	private IccardUseHistoryRepository iccardUseHistoryRepository;

	@Autowired
	private IccardRepository iccardRepository;

	@Autowired
	private CarRepository carRepository;

	@Autowired

	private DriverRepository driverRepository;

	@Override
	public JsonData insert(IccardUseHistory iccardUseHistory) {
		try {
			iccardUseHistoryRepository.save(iccardUseHistory);
			return JsonData.success("插入成功");
		} catch (Exception e) {
			return JsonData.fail("插入失败");
		}

	}

	@Override
	public JsonData save(Iccard iccard) {
		iccardRepository.save(iccard);
		return JsonData.success("添加成功");
	}

	@Override
	public List<Iccard> findSuppercarid() {
		return iccardRepository.findSuppercarid();
	}

	@Override
	public List<Iccard> findBackcarid() {
		// TODO Auto-generated method stub
		return iccardRepository.findbackcarid();
	}

	@Override
	public List<Iccard> findDrivercarid() {
		// TODO Auto-generated method stub
		return iccardRepository.findDrivercarid();
	}

	@Override
	public List<Iccard> findcarid() {
		// TODO Auto-generated method stub
		return iccardRepository.findcarid();
	}

	@Override
	public PageBean<Iccard> findAll(PageQuery pQuery, IccardSearch iSearch) {
		log.info("pQuery:{}", JsonMapper.obj2String(pQuery));
		log.info("iSearch:{}", JsonMapper.obj2String(iSearch));
		Pageable pageable = new PageRequest(pQuery.getPage(), pQuery.getSize());

		List<Predicate> ps = new ArrayList<Predicate>();
		PageBean<Iccard> pageBean = new PageBean<>();
		Specification<Iccard> spec = new Specification<Iccard>() {
			@Override
			public Predicate toPredicate(Root<Iccard> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				return null;

			}
		};
		Page<Iccard> pagedata = iccardRepository.findAll(spec, pageable);
		pageBean.setTotal(pagedata.getTotalElements());
		pageBean.setRows(pagedata.getContent());
		return pageBean;

	}

	@Override
	public JsonData delete(Integer id) {
		iccardRepository.delete(id);
		return JsonData.success("删除成功");
	}

	@Override
	public JsonData update(Iccard iccard) {
		iccardRepository.save(iccard);
		return JsonData.success("更新成功");
	}

	@Override
	public IccardResult vehicleBindingcard(WriteCarCard writeCarCard) {
		if (writeCarCard.getCardType() == 0) {

			Car car = carRepository.findByIccard(writeCarCard.getCardNumber());
			
			if (car != null) {
				car.setIccard(null);
			}
			//return IccardResult.fail("此卡已经绑定过车辆", "1");
			Car car2 = carRepository.findByvSn(writeCarCard.getOtherNumber());
			if (car2==null) {
				return IccardResult.fail("此车辆不存在", "1");
			}
			saveIccard(writeCarCard);
			
		
			carRepository.updateCard(writeCarCard.getOtherNumber(), writeCarCard.getCardNumber());
			return IccardResult.success("绑定车辆成功", "0");
		} else if (writeCarCard.getCardType() == 1) {

			Driver driver = driverRepository.findByIccard(writeCarCard.getCardNumber());

			Driver card = driverRepository.findByEmployeeCard(writeCarCard.getOtherNumber());
			
			if (card==null) {
				return IccardResult.fail("此驾驶员不存在", "1");
			}
			
			if (driver != null) {
				driver.setIccard(null);
			}
			//return IccardResult.fail("此卡已经绑定过驾驶员", "1");
			saveIccard(writeCarCard);
			driverRepository.updateCard(writeCarCard.getOtherNumber(), writeCarCard.getCardNumber());
			return IccardResult.success("绑定驾驶员成功", "0");
		}
		return IccardResult.fail("绑定失败", "1");
	}

	private void saveIccard(WriteCarCard writeCarCard) {
		Iccard iccard = null;
		iccard = new Iccard();
		iccard.setCardType(writeCarCard.getCardType());
		iccard.setIccard(writeCarCard.getCardNumber());
		iccardRepository.save(iccard);
	}

	@Override
	public LedResult searchAuth(String codeOne, String codeTwo,String io) {
		Driver driver=null;
		Car car=null;
		//创建历史记录
		
		IccardUseHistory iccardUseHistory=new IccardUseHistory();
		
		
		log.info("codeOne:{}",JsonMapper.obj2String(codeOne));
		log.info("codeTwo:{}",JsonMapper.obj2String(codeTwo));
		log.info("io:{}",JsonMapper.obj2String(io));
		
		StringBuilder builder = new StringBuilder();
		String split=",";
		String personSn="";
		String carSn="";
		LedResult ledResult= new LedResult();
		Iccard iccarone = iccardRepository.findByIccard(codeOne);
		Iccard iccartwo = iccardRepository.findByIccard(codeTwo);
		
	       
		
		log.info("iccarone:{}",JsonMapper.obj2String(iccarone));
		log.info("iccartwo:{}",JsonMapper.obj2String(iccartwo));
		if (io.equals("i")) {
			if (iccarone!=null|iccartwo!=null) {
				Integer type=iccardRepository.findByCarType(codeOne);
				if (type==null) {
					type=33;
				}
				if (type==0) {
					car = carRepository.findByIccard(codeOne);
					if (car!=null) {
						ledResult.setIn(0);
						ledResult.setCarCode(car.getvSn());
						iccardUseHistory.setDrivercard(codeOne);
						iccardUseHistory.setCariccard(codeTwo);
						iccardUseHistory.setUpdateTime(new Date());
						this.insert(iccardUseHistory);
					}else {
					ledResult.setIn(1);}
				}else {
					type=iccardRepository.findByCarType(codeTwo);
					if (type==null) {
						type=33;
					}
					if (type==0) {
						 car = carRepository.findByIccard(codeTwo);
						if (car!=null) {
							ledResult.setIn(0);
							ledResult.setCarCode(car.getvSn());
							iccardUseHistory.setDrivercard(codeTwo);
							iccardUseHistory.setCariccard(codeOne);
							iccardUseHistory.setUpdateTime(new Date());
							this.insert(iccardUseHistory);
						}else {
						ledResult.setIn(1);}
					}else {
						ledResult.setIn(1);
					}
				}
			return ledResult;
			}else {
				ledResult.setIn(1);
				return ledResult;
			}
		}
		
		if (io.equals("o")) {
			if (iccarone!=null) {
				if (iccarone.getCardType()==1) {
					personSn= codeOne;
					log.info("mes:{}","人卡");
				}	
				if (iccarone.getCardType()==255) {
					personSn= codeOne;
					log.info("mes:{}","人卡");
				}
				if (iccarone.getCardType()==0) {
					carSn=codeOne;
					log.info("mes:{}","车卡");
				}
			}
			
			if (iccartwo!=null) {
				if (iccartwo.getCardType()==0) {
					carSn= codeTwo;
					log.info("mes:{}","车卡");
				}
				
				if (iccartwo.getCardType()==1) {
					personSn= codeTwo;
					log.info("mes:{}","人卡");
				}	
				if (iccartwo.getCardType()==255) {
					personSn= codeTwo;
					log.info("mes:{}","人卡");
				}
			}
		//__________________________________________________________ 判断是车卡还是人卡
			if(StringUtils.isBlank(personSn)) {
				driver=null;
			}else {
				driver = driverRepository.findByIccard(personSn);
			}
			
	        Iccard	iccard=iccardRepository.findByIccard(personSn);
	        
	        
	        
	        if (iccard==null) {
	        	ledResult.setDriverAuth(1);
	        	builder.append("此卡未绑定驾驶员");
	        	ledResult.setCardType(1);
			}else {
	        
	        if (iccard.getCardType().equals(255)) {
				ledResult.setCardType(0);
			}else {
				ledResult.setCardType(1);
			}
	        if (driver!=null) {
				ledResult.setDriver(driver.getName());
				 if ("禁止".equals(driver.getIsallow())) {
						ledResult.setDriverAuth(1);
						
						if (StringUtils.isNotBlank(builder.toString())) {
							ledResult.setReason(builder.append(split).append("驾驶员未授权").toString());
						}else {
							ledResult.setReason(builder.append("驾驶员未授权").toString());
						}
				  }else {
					  ledResult.setDriverAuth(0);
				}
			}else {
				ledResult.setDriverAuth(1);
				builder.append("未绑定驾驶员");
			}
	        //ledResult.setCardType(1);
			}
	        
	        if (StringUtils.isBlank(carSn)) {
				car=null;
			}else {
				car = carRepository.findByIccard(carSn);	
			}
	        
	        if (car!=null) {
	    	  ledResult.setCarCode(car.getvSn());
	   		Date endTime = car.getEndTime();
	   		
	   		Date licenseEndTime = car.getLicenseEndTime();
	   		if (endTime==null) {
	   			ledResult.setCarAuth(1);
	   			builder.append("无保险");
			}else {
				if (endTime.getTime()-System.currentTimeMillis()<=0) {
	   	   			builder.append("保险过期");
	   	   			ledResult.setCarAuth(1);
	   	   		}
			}
	   		
	   		if (licenseEndTime==null) {
	   			ledResult.setCarAuth(1);
	   			builder.append("无牌照");
			}else {
				if (licenseEndTime.getTime()-System.currentTimeMillis()<=0) {
		   			if (StringUtils.isNotBlank(builder.toString())) {
		   				builder.append(split).append("车牌过期");
					}else {
						builder.append("车牌过期");
					}
		   			
		   			ledResult.setCarAuth(1);
		   		}
			}
	   		
	   		
	   		if (endTime==null) {
	   		     endTime = DateUtils.String2date("1970-10-01 00:00:00");
			}
	   		
	   		if (licenseEndTime==null) {
	   			licenseEndTime = DateUtils.String2date("1970-10-01 00:00:00");
			}
	   		if (endTime.getTime()-System.currentTimeMillis()>0) {
				if (licenseEndTime.getTime()-System.currentTimeMillis()>0) {
					ledResult.setCarAuth(0);
				}
			}
	   		
		  }	else {
			  if (StringUtils.isNotBlank(builder.toString())) {
				  builder.append(split).append("未绑定车辆");
				  ledResult.setCarAuth(1);
			}else {
				builder.append("未绑定车辆");
				ledResult.setCarAuth(1);
			}
		  }
	     
	       if (1!=ledResult.getCarAuth()) {
			ledResult.setCarAuth(0);
		}
	        
	      if (StringUtils.isNotBlank(builder.toString())) {
	    	  ledResult.setReason(builder.toString());
		  }   
	      
	      iccardUseHistory.setCariccard(carSn);
	      iccardUseHistory.setDrivercard(personSn);
	      iccardUseHistory.setError(builder.toString());
	      iccardUseHistory.setUpdateTime(new Date());
	      this.insert(iccardUseHistory);
		 return ledResult;
		}
		
		throw new PermissionException("异常");
	}

	@Override
	public IccardResult carIn(String codeOne, String codeTwo) {
		Iccard iccardOne = iccardRepository.findByIccard(codeOne);
		Iccard iccardTwo = iccardRepository.findByIccard(codeTwo);
		
		if (iccardOne!=null&iccardTwo!=null) {
			return IccardResult.success("允许进", "0");
		}
		return IccardResult.fail("禁止入内", "1");
	}
}
