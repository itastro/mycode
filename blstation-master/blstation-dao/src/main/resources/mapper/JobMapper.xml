<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bl.station.mapper.JobMapper">
    <resultMap id="BaseResultMap" type="com.bl.station.entity.Job">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="createtime" property="createtime" jdbcType="TIMESTAMP"/>
        <result column="salary" property="salary" jdbcType="VARCHAR"/>
        <result column="expired" property="expired" jdbcType="TIMESTAMP"/>
        <result column="jobname" property="jobname" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="education" property="education" jdbcType="VARCHAR"/>
        <result column="years" property="years" jdbcType="VARCHAR"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="number" property="number" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="com.bl.station.entity.Job" extends="BaseResultMap">
        <result column="description" property="description" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, createtime, salary, expired, jobname, status, education, years, address, number
  </sql>
    <sql id="Blob_Column_List">
    description
  </sql>
    <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs"
            parameterType="com.bl.station.entity.JobExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from job
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.bl.station.entity.JobExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from job
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from job
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from job
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.bl.station.entity.JobExample">
        delete from job
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.bl.station.entity.Job">
    insert into job (id, createtime, salary, 
      expired, jobname, status, 
      education, years, address, 
      number, description)
    values (#{id,jdbcType=INTEGER}, #{createtime,jdbcType=TIMESTAMP}, #{salary,jdbcType=VARCHAR}, 
      #{expired,jdbcType=TIMESTAMP}, #{jobname,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, 
      #{education,jdbcType=VARCHAR}, #{years,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{number,jdbcType=INTEGER}, #{description,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.bl.station.entity.Job">
        insert into job
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="createtime != null">
                createtime,
            </if>
            <if test="salary != null">
                salary,
            </if>
            <if test="expired != null">
                expired,
            </if>
            <if test="jobname != null">
                jobname,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="education != null">
                education,
            </if>
            <if test="years != null">
                years,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="number != null">
                number,
            </if>
            <if test="description != null">
                description,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="createtime != null">
                #{createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="salary != null">
                #{salary,jdbcType=VARCHAR},
            </if>
            <if test="expired != null">
                #{expired,jdbcType=TIMESTAMP},
            </if>
            <if test="jobname != null">
                #{jobname,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="education != null">
                #{education,jdbcType=VARCHAR},
            </if>
            <if test="years != null">
                #{years,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="number != null">
                #{number,jdbcType=INTEGER},
            </if>
            <if test="description != null">
                #{description,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.bl.station.entity.JobExample" resultType="java.lang.Integer">
        select count(*) from job
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update job
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.createtime != null">
                createtime = #{record.createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.salary != null">
                salary = #{record.salary,jdbcType=VARCHAR},
            </if>
            <if test="record.expired != null">
                expired = #{record.expired,jdbcType=TIMESTAMP},
            </if>
            <if test="record.jobname != null">
                jobname = #{record.jobname,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=VARCHAR},
            </if>
            <if test="record.education != null">
                education = #{record.education,jdbcType=VARCHAR},
            </if>
            <if test="record.years != null">
                years = #{record.years,jdbcType=VARCHAR},
            </if>
            <if test="record.address != null">
                address = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.number != null">
                number = #{record.number,jdbcType=INTEGER},
            </if>
            <if test="record.description != null">
                description = #{record.description,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update job
        set id = #{record.id,jdbcType=INTEGER},
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
        salary = #{record.salary,jdbcType=VARCHAR},
        expired = #{record.expired,jdbcType=TIMESTAMP},
        jobname = #{record.jobname,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=VARCHAR},
        education = #{record.education,jdbcType=VARCHAR},
        years = #{record.years,jdbcType=VARCHAR},
        address = #{record.address,jdbcType=VARCHAR},
        number = #{record.number,jdbcType=INTEGER},
        description = #{record.description,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update job
        set id = #{record.id,jdbcType=INTEGER},
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
        salary = #{record.salary,jdbcType=VARCHAR},
        expired = #{record.expired,jdbcType=TIMESTAMP},
        jobname = #{record.jobname,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=VARCHAR},
        education = #{record.education,jdbcType=VARCHAR},
        years = #{record.years,jdbcType=VARCHAR},
        address = #{record.address,jdbcType=VARCHAR},
        number = #{record.number,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.bl.station.entity.Job">
        update job
        <set>
            <if test="createtime != null">
                createtime = #{createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="salary != null">
                salary = #{salary,jdbcType=VARCHAR},
            </if>
            <if test="expired != null">
                expired = #{expired,jdbcType=TIMESTAMP},
            </if>
            <if test="jobname != null">
                jobname = #{jobname,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="education != null">
                education = #{education,jdbcType=VARCHAR},
            </if>
            <if test="years != null">
                years = #{years,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="number != null">
                number = #{number,jdbcType=INTEGER},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.bl.station.entity.Job">
    update job
    set createtime = #{createtime,jdbcType=TIMESTAMP},
      salary = #{salary,jdbcType=VARCHAR},
      expired = #{expired,jdbcType=TIMESTAMP},
      jobname = #{jobname,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      education = #{education,jdbcType=VARCHAR},
      years = #{years,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      number = #{number,jdbcType=INTEGER},
      description = #{description,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="com.bl.station.entity.Job">
    update job
    set createtime = #{createtime,jdbcType=TIMESTAMP},
      salary = #{salary,jdbcType=VARCHAR},
      expired = #{expired,jdbcType=TIMESTAMP},
      jobname = #{jobname,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      education = #{education,jdbcType=VARCHAR},
      years = #{years,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      number = #{number,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <select id="pageQuery" resultMap="ResultMapWithBLOBs" parameterType="map">
        SELECT
        <include refid="Base_Column_List"/>,
        <include refid="Blob_Column_List"/>
        FROM job
        <where>

            <if test="search!=null and search.jobname!=null">
                AND jobname LIKE CONCAT('%',#{search.jobname},'%')
            </if>

        </where>
        ORDER BY createtime DESC
    </select>

    <select id="findAll" resultMap="ResultMapWithBLOBs">
        SELECT
        <include refid="Base_Column_List"/>,
        <include refid="Blob_Column_List"/>
        FROM job
        WHERE expired &gt; now()  ORDER BY createtime DESC
    </select>
</mapper>